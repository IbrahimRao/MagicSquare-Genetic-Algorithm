# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17U6tkyVG1CPOWPsp81YeiENyFz8vZ_U3

#### Magic Square solving using Genetic Algorithm
"""

import random

# Define the target sum for rows, columns, and diagonals
target_sum = 15

# Define the size of the magic square
size = 3

# Define the population size and number of generations
population_size = 100
num_generations = 10000


def calculate_fitness(square):
    # Calculate the fitness of a magic square
    fitness = 0
    # Check rows
    for row in square:
        fitness += abs(sum(row) - target_sum)
    # Check columns
    for j in range(size):
        column_sum = sum(square[i][j] for i in range(size))
        fitness += abs(column_sum - target_sum)
    # Check diagonals
    diagonal_sum1 = sum(square[i][i] for i in range(size))
    diagonal_sum2 = sum(square[i][size - i - 1] for i in range(size))
    fitness += abs(diagonal_sum1 - target_sum)
    fitness += abs(diagonal_sum2 - target_sum)
    return fitness

def crossover(parent1, parent2):
    # Perform crossover between two parent squares
    child = [[0 for _ in range(size)] for _ in range(size)]
    inserted_values = set()

    for i in range(size):
        for j in range(int(size/2)):
            child[i][j] = parent1[i][j]
            inserted_values.add(parent1[i][j])

    for i in range(size):
        for j in range(int(size/2), size):
            found = False
            for k in range(size):
                for l in range(size):
                    if parent2[k][l] not in inserted_values:
                        child[i][j] = parent2[k][l]
                        inserted_values.add(parent2[k][l])
                        found = True
                        break
                if found:
                    break


    return child

def mutate(square):
    # Apply mutation to a magic square
    if random.random() < 0.1:
        i = random.randint(0, size - 1)
        i2 = random.randint(0, size - 1)
        j1, j2 = random.sample(range(size), 2)
        square[i][j1], square[i2][j2] = square[i2][j2], square[i][j1]

    pass



def genetic_algorithm(square):
    # Generate an initial population
    population = [square]
    for _ in range(population_size - 1):
        new_square = [row.copy() for row in square]
        random.shuffle(new_square[0])
        random.shuffle(new_square[1])
        random.shuffle(new_square[2])
        population.append(new_square)



    for generation in range(num_generations):

        # Create new offspring through crossover and mutation
        offspring = []
        for i in range(0, population_size):
           mutate(population[i])

        for i in range(0, population_size, 2):
            parent1 = population[i]
            parent2 = population[i + 1]
            child1 = crossover(parent1, parent2)
            offspring.append(child1)

        # Replace some individuals in the population with the offspring
        new_population = offspring + population
        new_population = sorted(new_population, key=calculate_fitness)[:population_size]

        fitness_scores = [calculate_fitness(square) for square in new_population]

        population = random.choices(new_population,weights=fitness_scores ,k=population_size)

        # Check for termination condition
        best_fitness = min(fitness_scores)
        if best_fitness == 0:
            break

    # Find the best solution
    best_square = min(new_population, key=calculate_fitness)
    return best_square

# Generate an initial population of magic squares
square = [
    [6,9,8],
    [7,1,3],
    [2,5,4]
]

# Solve the Magic Square problem using the Genetic Algorithm
best_solution = genetic_algorithm(square)

# Print the best solution
for row in best_solution:
    print(row)

